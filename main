print("waiting for " .. game.Players.LocalPlayer.Name)
script.Parent = game.Players.LocalPlayer.Character or game.Workspace[game.Players.LocalPlayer.Name] or game.Players.LocalPlayer.CharacterAdded:Wait()
print("i waited")
workspace.Gravity = 196.2
local player = game.Players.LocalPlayer
local swrs = 0
local vtim = 0
local htim = 0
local chg = 0
local cje = false
local hwd = false
local cdb = false
local hfd = false
local vfd = false
vwrc = 0
local abort = false
local mouse = player:GetMouse()
local cam = workspace.CurrentCamera
repeat wait() until player.Character
local char = player.Character
wait(1)
char.Humanoid.JumpPower = 50.145
local gp
local Torsoz = char:WaitForChild("HumanoidRootPart")
local NV = Vector3.new(0,0,0)
local Hu = char.Humanoid

local FOV = 90
local Shift, Space, Sitting = false,false,false
local GravPoint = 0
local Diving = false
local DivingCooldown = 0
local DivingDir = NV
local DivingCF = CFrame.new(0,0,0)
local DivingBG, DivingBV
local HWallRunning = false
local HWRGravDrop = false
local HWRLastPart
local HWRCooldown = 0
local HWRDir
local VWallRunning = false
local VWRLastPart
local VWRCooldown = 0
local VWRLeft,VWRRight = false,false
local Sliding = false
local SlideCooldown = 0
local Standing = true
local Action = "Standing"
local animplus = true
local animspeed = 0
local animangle = 0.01

for i, v in pairs(char:children()) do
	if (v.className == "LocalScript" and v.Name == "ParkourSkrip") or v.className == "NumberValue" or v.className == "BoolValue" or v.className == "Model" then
		v:Destroy()
	end
end

local loadids = {112474909, 112474911, 112474909}

local stamina = 1000000
local maxstamina = 1000000
local defsprint = 32
local sprint = defsprint  

local pause = Instance.new("BoolValue", char)
pause.Name = "Pause"
pause.Value = false
Hu:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
Hu:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
script.Name = "ParkourSkrip"

function LoadTextures()
	local pls = game:service("ContentProvider")
	for i, v in pairs(loadids) do
		pls:Preload("http://www.roblox.com/asset/?id="..v)
		wait(0.04)
	end
end
LoadTextures()

function CreateGui()
	for i, v in pairs(player.PlayerGui:children()) do
		if v.className == "ScreenGui" and v.Name == "staminaGui" then
			v:remove()
		end
	end
	g = Instance.new("ScreenGui", player.PlayerGui)
	g.Name = "staminaGui"
	sf = Instance.new("Frame", g)
	sf.BackgroundTransparency = 1
	sf.Name = "statusframe"
	sf.Position = UDim2.new(1,-250,0.3,0)
	sf.Size = UDim2.new(0,200,0,150)
	st = Instance.new("TextLabel", sf)
	st.Text = ""
	st.Size = UDim2.new(1,0,1,0)
	st.BackgroundTransparency = 1
	st.TextColor3 = Color3.new(0.75,0.75,0.75)
	st.TextStrokeColor3 = Color3.new(0.75,0.75,0.75)
	st.TextStrokeTransparency = 0
	st.FontSize = 12
	
	c = Instance.new("Frame", g)
	c.Visible = false
	c.Size = UDim2.new(0,150,0.5,0)
	c.BackgroundTransparency = 1
	c.Position = UDim2.new(1,-150,0.25,0)
	c.Name = "Container"

	t = Instance.new("TextLabel", c)
	t.Size = UDim2.new(0,0,0.2,0)
	t.Position = UDim2.new(0.5,0,0.4,0)
	t.TextXAlignment = "Right"
	t.Font = "ArialBold"
	t.TextTransparency = 0.1
	t.TextColor3 = Color3.new((chg/100),1-(chg/100),0)
	t.TextStrokeColor3 = Color3.new((chg/100),1-(chg/100),0)
	t.TextStrokeTransparency = 0.3
	t.FontSize = 12
	t.BackgroundTransparency = 1
	t2 = t:Clone()
	t2.Parent = c
	t2.Size = UDim2.new(0,0,0.2,0)
	t2.Position = UDim2.new(0.5,0,0.6,0)
	l = t:Clone()
	l.Parent = c
	l.Size = UDim2.new(0,0,0.2,0)
	l.Position = UDim2.new(0.5,0,0.5,0)
	l.Text = "-----"

	function Calculate()
		local ysize = c.Size.Y.Offset
		local per = (stamina/maxstamina) * c.Size.Y.Offset
		local rem = (-(stamina/maxstamina-1)) * c.Size.Y.Offset
		t.Text = math.floor(stamina)
		t2.Text = maxstamina
	end
	Calculate()

	wait(0.01)
	c.Visible = true
end
CreateGui()

function RAY(pos, dir, startpos, endpos, distleft, collidedlist)
	collidedlist = collidedlist or {char}
	startpos = startpos or pos
	distleft = distleft or dir.unit * dir.magnitude
	endpos = endpos or pos + distleft
	local ray = Ray.new(pos, distleft)
	local hitz,enz = workspace:FindPartOnRayWithIgnoreList(ray, collidedlist)
--[[
local p = P:Clone()
p.Parent = char
p.Size = Vector3.new(0.4,0.4,0.4)
p.BrickColor = BrickColor.new("Lime green")
p.CanCollide = false
p.CFrame = CFrame.new(enz)
p.Transparency = 0.3
]]
	if hitz ~= nil then
		if hitz.CanCollide == false then
			table.insert(collidedlist, hitz)
			local newpos = enz
			local newdistleft = distleft - (dir.unit * (pos - newpos).magnitude)
			if newdistleft ~= NV then
				return RAY(newpos-(dir*0.01), dir, startpos, endpos, newdistleft+(dir*0.01), collidedlist)
			end
		end
	end

	return hitz, enz, ray
end


function Stand()
	Hu.PlatformStand = false
	if Sitting == true then
		local tordir = Torsoz.Position + (Torsoz.CFrame.lookVector*10000)
		local cf = CFrame.new(Torsoz.Position + Vector3.new(0,1.8,0), Vector3.new(tordir.x,Torsoz.Position.y,tordir.z))
		Torsoz.CFrame = cf
	end
	for i, v in pairs(Torsoz:children()) do
		if v.Name == "StaminaBodyObject" then
			v:remove()
		end
	end
	Sitting = false
	Diving = false
	Standing = true
	Action = "Standing"
end

--------------------------------------- Dive ----------------------------------


function FindSurface(part, position)
	local obj = part.CFrame:pointToObjectSpace(position)
	local siz = part.Size/2
	for i,v in pairs(Enum.NormalId:GetEnumItems()) do
		local vec = Vector3.FromNormalId(v)
		local wvec = part.CFrame:vectorToWorldSpace(vec)
		local vz = (obj)/(siz*vec)
		if (math.abs(vz.X-1) < 0.01 or math.abs(vz.Y-1) < 0.01 or math.abs(vz.Z-1) < 0.01) then
			return wvec,vec
		end
	end
	if part.className ~= "Part" then
		return part.CFrame:vectorToWorldSpace(Vector3.new(0,0.707,-0.707)), Vector3.new(0,0.707,-0.707)
	end
end

function HWallRun(part, pos, side)
	if ((part.className == "Part" and part.Shape == Enum.PartType.Block) or part.className ~= "Part") and hfd == false and vfd == false and Torsoz.Velocity.y > -50 then
		Hu:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
		Hu:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
		Hu:ChangeState(Enum.HumanoidStateType.Running)
		st.Text = "Wallrunning"
		hfd = true
		Standing = false
		HWallRunning = true
		Action = "HWallRunning"
		GravPoint = Torsoz.Velocity.y
		HWRLastPart = part
		local dir, dirc = FindSurface(part, pos)
		towall = -dir
		dir = (CFrame.new(NV, dir) * CFrame.Angles(0,side,0)).lookVector
		if dir ~= nil then
		local bv = Instance.new("BodyVelocity", Torsoz)
		bv.Name = "StaminaBodyObject"
		bv.maxForce = Vector3.new(math.huge,math.huge,math.huge)
		bv.P = 9000
		bv.velocity = (dir*(sprint-0.5)) + Vector3.new(0,GravPoint,0)
		local bg = Instance.new("BodyGyro", Torsoz)
		bg.Name = "StaminaBodyObject"
		bg.maxTorque = Vector3.new(math.huge,math.huge,math.huge)
		bg.cframe = CFrame.new(Torsoz.Position+(towall*-2), Torsoz.Position) * CFrame.Angles(0,-side,-side/4.2)
		bg.D = 100

		local sid = Instance.new("Snap")


		Torsoz.CFrame = CFrame.new(pos+(towall*-2), pos) * CFrame.Angles(0,-side,-side/2.2)
		bg.cframe = CFrame.new(pos+(towall*-2), pos) * CFrame.Angles(0,-side,-side/2.2)

		local aniangle = 0
		local aniplus = true
		local aniangle2 = 0
		local aniplus2 = true

		local prevpart = part
		HWRLastPart = part
		while HWallRunning == true and abort == false and Space == true do
			hwd = false
			if aniangle > math.pi then
				aniplus = false
			elseif aniangle < -math.pi then
				aniplus = true  
			end
			if aniplus == true then
				aniangle = aniangle + 0.95
			elseif aniplus == false then
				aniangle = aniangle - 0.95
			end

			if aniangle2 > math.pi then
				aniplus2 = false
			elseif aniangle2 < -math.pi then
				aniplus2 = true  
			end
			if aniplus2 == true then
				aniangle2 = aniangle2 + 0.23
			elseif aniplus2 == false then
				aniangle2 = aniangle2 - 0.23
			end

			Hu.PlatformStand = true
			local hitz, enz = RAY(Torsoz.Position, Vector3.new(0,-3,0))
			local hitz2, enz2 = RAY(Torsoz.Position, towall*3.4)

			--- if player ends wall run on ground
			if hitz ~= nil and hitz.CanCollide == true then
				bg.cframe = CFrame.new(enz2+(towall*-2), enz2) * CFrame.Angles(0,-side,0)
				local offset = (bg.cframe.p.y+enz2.y) - bg.cframe.p.y
				Torsoz.CFrame = CFrame.new(Vector3.new(bg.cframe.p.x,offset,bg.cframe.p.z), enz2) * CFrame.Angles(0,-side,0)
				Torsoz.Velocity = NV
				break
			end

			---- if new wall found --------
			if hitz2 ~= nil and hitz2.CanCollide == true then
				if hitz2 ~= prevpart then
					local direct = CFrame.new(Torsoz.Position, Torsoz.Position+dir) * CFrame.Angles(0,side,0)
					local hitz3, enz3 = RAY(Torsoz.Position, (direct * CFrame.Angles(0,-side/2.3,0)).lookVector*4)
					if hitz3 ~= nil then
						Torsoz.CFrame = CFrame.new(enz2+(towall*-2), enz2) * CFrame.Angles(0,-side*1.1,-side/2.2)
						bg.cframe = CFrame.new(enz2+(towall*-2), enz2) * CFrame.Angles(0,-side*1.1,-side/2.2)
						dir, dirc = FindSurface(hitz2, enz2)
						towall = -dir
						dir = (CFrame.new(NV, dir) * CFrame.Angles(0,side,0)).lookVector
						prevpart = hitz2
						HWRLastPart = hitz2
					else
						---- if player fails to find new wall to run on
						Torsoz.CFrame = CFrame.new(Torsoz.Position, Torsoz.Position+dir)
						bg.cframe = CFrame.new(Torsoz.Position, Torsoz.Position+dir)
						HWRCooldown = 0
						break
					end
				end
				--- continue to wall run
				Torsoz.CFrame = CFrame.new(enz2+(towall*-2), enz2) * CFrame.Angles(0,-side,-side/2.2)
				bg.cframe = CFrame.new(enz2+(towall*-2), enz2) * CFrame.Angles(0,-side,-side/2.2)
			else
				---- if player ends wall run at end of wall
				Torsoz.CFrame = CFrame.new(Torsoz.Position, Torsoz.Position+dir)
				bg.cframe = CFrame.new(Torsoz.Position, Torsoz.Position+dir)
				HWRCooldown = 0
				break
			end

			local hitz3, enz3 = RAY(Torsoz.Position, Torsoz.CFrame.lookVector*2)
			if hitz3 ~= nil and hitz3.CanCollide == true then
				Torsoz.CFrame = CFrame.new(Torsoz.Position, Torsoz.Position+dir)
				bg.cframe = CFrame.new(Torsoz.Position, Torsoz.Position+dir)
				HWRCooldown = 0
				break
			end

			bv.Parent = Torsoz
			--bv.velocity = (dir*(sprint-0.5)) + Vector3.new(0,GravPoint,0)
			mix = Vector3.new(char.HumanoidRootPart.Velocity.X,char.HumanoidRootPart.Velocity.Y,char.HumanoidRootPart.Velocity.Z)
			--mix = (mix+(dir*(sprint-0.5)))/2
			bv.velocity = Vector3.new(mix.X,(dir.Y*(sprint-0.5)),mix.Z) + Vector3.new(0,GravPoint,0)
			bg.cframe = bg.cframe * CFrame.Angles(aniangle/80,aniangle/80,0)
			Torsoz.CFrame = Torsoz.CFrame * CFrame.Angles(aniangle/80,aniangle/80,0)

			wait(0.025)
			--if GravPoint < -100 then
			--bg.cframe = CFrame.new(enz2+(towall*-2), enz2) * CFrame.Angles(0,-side,0)
			--local offset = math.abs((bg.cframe.p.y+enz2.y) - bg.cframe.p.y)
			--Torsoz.CFrame = CFrame.new(Vector3.new(bg.cframe.p.x,offset,bg.cframe.p.z), enz2) * CFrame.Angles(0,-side,0)
			--break
			--end
			print("HWR")
		end


		Hu.PlatformStand = false
		bv:remove()

		HWRGravDrop = false
		Stand()
		st.Text = ""
		HWallRunning = false
		Space = false
		Hu:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,true)
		Hu:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
		while hwd == false do
			wait(0.02)
			htim = htim + 1
			print(htim)
			if htim < 8 and Space == true and hwd == false then
				print("HWR boost")

				Hu:ChangeState(Enum.HumanoidStateType.Jumping)
				--if stamina - (chg*2.5) > 0 then
					--char.HumanoidRootPart.Velocity = Vector3.new(char.HumanoidRootPart.Velocity.X+(Torsoz.CFrame.LookVector.X*(chg*0.65)),char.HumanoidRootPart.Velocity.Y+(0.65*chg),char.HumanoidRootPart.Velocity.Z+(Torsoz.CFrame.LookVector.Z*(chg*0.65)))
					--stamina = stamina-(chg*2.5)
					--chg = 0
				--else
					--char.HumanoidRootPart.Velocity = Vector3.new(char.HumanoidRootPart.Velocity.X+(Torsoz.CFrame.LookVector.X*((stamina*0.4)*0.65)),char.HumanoidRootPart.Velocity.Y+((stamina*0.4)*0.65),char.HumanoidRootPart.Velocity.Z+(Torsoz.CFrame.LookVector.Z*((stamina*0.4)*0.65)))
					--stamina = 0
					--chg = 0
				--end
				hwd = true
				hfd = false
			end
			if htim >= 8 then
				hwd = true
			end
		end
		hfd = false
		htim = 0

		end
	end
end

function VWR(part, pos)
	if ((part.className == "Part" and part.Shape == Enum.PartType.Block) or part.className ~= "Part" and vwrc == 0) and vfd == false and hfd == false then
		Hu:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
		Hu:SetStateEnabled(Enum.HumanoidStateType.Running,false)
		Hu:ChangeState(Enum.HumanoidStateType.Climbing)
		vfd = true
		print("VWR Activated")
		st.Text = "Climbing"
		--char.HumanoidRootPart.Velocity = Vector3.new(char.HumanoidRootPart.Velocity.X/5,char.HumanoidRootPart.Velocity.Y,char.HumanoidRootPart.Velocity.Z/5)
		char.HumanoidRootPart.Velocity = Vector3.new(0,char.HumanoidRootPart.Velocity.Y,0)
		Standing = false
		VWallRunning = true
		Action = "VWallRunning"
		GravPoint = 0
		local percent = 1
		VWRLastPart = part
		local dir, dirc = FindSurface(part, pos)
		towall = -dir
		dir = (CFrame.new(NV, -dir) * CFrame.Angles(math.pi/2,0,0)).lookVector
--[[
local p = P:Clone()
p.Parent = char
p.Size = Vector3.new(2,2,2)
p.BrickColor = BrickColor.new("Lime green")
p.CanCollide = false
p.CFrame = part.CFrame * CFrame.new(dirc*5)
p.Transparency = 0.3
]]
		local bv = Instance.new("BodyVelocity", Torsoz)
		bv.Name = "StaminaBodyObject"
		bv.maxForce = Vector3.new(math.huge,math.huge,math.huge)
		bv.P = 9000
		bv.velocity = Vector3.new(0,0,0)

		local bg = Instance.new("BodyGyro", Torsoz)
		bg.Name = "StaminaBodyObject"
		bg.maxTorque = Vector3.new(math.huge,math.huge,math.huge)
		bg.D = 100
		local posi = pos + (-towall*1.8)
		bg.cframe = CFrame.new(posi, posi+towall) * CFrame.Angles((math.pi/5),0,0)
		Torsoz.CFrame = CFrame.new(posi, posi+towall) * CFrame.Angles((math.pi/5),0,0)

		local aniangle = 0
		local aniplus = true

		while VWallRunning == true and stamina > 16 and vwrc == 0 and Space == true do
			if abort == false then
				cdb = false
				stamina = stamina - 15
				local hitz, enz = RAY(Torsoz.Position, towall*2.1)
				local hitz2, enz2 = RAY(Torsoz.Position, (CFrame.new(NV,towall)*CFrame.Angles(math.pi/2,0,0)).lookVector*2.4)

				if aniangle > math.pi then
					aniplus = false
				elseif aniangle < -math.pi then
					aniplus = true  
				end
				if aniplus == true then
					aniangle = aniangle + (1.3*(percent+0.2))
				elseif aniplus == false then
					aniangle = aniangle - (1.3*(percent+0.2))
				end
				if bv.velocity.Y < 20 then
					char.HumanoidRootPart.Velocity = Vector3.new(Torsoz.Velocity.X/5, Torsoz.Velocity.Y+3, Torsoz.Velocity.Z/5)
					bv.Velocity = char.HumanoidRootPart.Velocity
				else
					char.HumanoidRootPart.Velocity = Vector3.new(Torsoz.Velocity.X/5, Torsoz.Velocity.Y-0.5, Torsoz.Velocity.Z/5)
					bv.Velocity = char.HumanoidRootPart.Velocity
				end

				--(dir*(sprint-1))*percent

				bg.cframe = CFrame.new(posi, posi+towall) * CFrame.Angles((math.pi/5),0,0) * CFrame.Angles(0,aniangle/60,0)

				if hitz == nil then
					--local lv = Torsoz.Position + (Torsoz.CFrame.lookVector*100)
					--Torsoz.CFrame = CFrame.new(Torsoz.Position, Vector3.new(lv.x,Torsoz.Position.y,lv.z))
					break
				end

				--if hitz2 ~= nil then
				--percent = 0
				--VWallRunning = "Falling"
				--Action = "VWRFalling"
				--GravPoint = -7
				--break
				--end

				wait(0.02)
				if percent <= 0.15 then
					VWallRunning = "Falling"
					Action = "VWRFalling"
				end
				print("VWR")
			end
		end
		if stamina < 16 then
			vwrc = 60
		end

		-------------------------- Falling from VWR ------------------------------


		bv:remove()
		bg:remove()
		VWallRunning = false
		Stand()
		Space = false
		Hu:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
		Hu:SetStateEnabled(Enum.HumanoidStateType.Running,true)
		-- and char.Humanoid:GetState() == Enum.HumanoidStateType.Freefall
		Torsoz.CFrame = Torsoz.CFrame + Vector3.new(0, 2.5, 0)
		st.Text = ""
		while vtim < 8 and cdb == false do
			wait(0.02)
			vtim = vtim + 1
			print(vtim)
			if Space == true and cdb == false then
				print("VWR boost")
				Hu:ChangeState(Enum.HumanoidStateType.Jumping)
				--if stamina - (chg*2.5) > 0 then
					--char.HumanoidRootPart.Velocity = Vector3.new(char.HumanoidRootPart.Velocity.X+(Torsoz.CFrame.LookVector.X*(chg*0.65)),char.HumanoidRootPart.Velocity.Y+(0.65*chg),char.HumanoidRootPart.Velocity.Z+(Torsoz.CFrame.LookVector.Z*(chg*0.65)))
					--stamina = stamina-(chg*2.5)
					--chg = 0
				--else
					--char.HumanoidRootPart.Velocity = Vector3.new(char.HumanoidRootPart.Velocity.X+(Torsoz.CFrame.LookVector.X*((stamina*0.4)*0.65)),char.HumanoidRootPart.Velocity.Y+((stamina*0.4)*0.65),char.HumanoidRootPart.Velocity.Z+(Torsoz.CFrame.LookVector.Z*((stamina*0.4)*0.65)))
					--stamina = 0
					--chg = 0
				--end
				cdb = true
				vfd = false
			end
		end
		vtim = 0
		vfd = false

	end
end

function Slide(pos)
	st.Text = "Sliding"
	Action = "Sliding"
	Sliding = true
	GravPoint = Torsoz.Velocity.y
	local spd = Vector3.new(Torsoz.Velocity.x,0,Torsoz.Velocity.z).magnitude + 10
	local dir = Vector3.new(Torsoz.Velocity.x,0,Torsoz.Velocity.z).unit

	local bv = Instance.new("BodyVelocity", Torsoz)
	bv.maxForce = Vector3.new(1/0,1/0,1/0)
	bv.velocity = dir*spd
	local bg = Instance.new("BodyGyro", Torsoz)
	bg.maxTorque = Vector3.new(1/0,1/0,1/0)
	bg.cframe = CFrame.new(NV, dir) * CFrame.Angles(math.pi/2.2,0.24,0)

	local count = 0
	local lastpos

	while Sliding == true do
		count = count + 1
		Hu.PlatformStand = true
		local hitz1, enz1 = RAY(Torsoz.Position+Vector3.new(0,0.03,0), dir *2.5)
		local hitz2, enz2 = RAY(Torsoz.Position-Vector3.new(0,0.2,0), dir *2.5)
		local ghitz, genz = RAY(Torsoz.Position, Vector3.new(0,-2.6,0))
		bv.velocity = dir*spd + Vector3.new(0,GravPoint,0)

		if (hitz1 ~= nil and hitz1.CanCollide == true) or (hitz2 ~= nil and  hitz2.CanCollide == true) then
			bv:remove()
			bg:remove()
			Sliding = "HitObject"
		end
		if ghitz ~= nil then
			GravPoint = 18
			Torsoz.CFrame = CFrame.new(genz, genz+dir) * CFrame.Angles(math.pi/2.2,0.24,0) + Vector3.new(0,0.7,0)
			spd = spd - 0.95
		else
			if GravPoint > -180 then
				GravPoint = GravPoint - 5.6
			end
			spd = spd - 0.36
		end
		if spd < 7 then
			Sliding = false
		end
		wait(0.02)
	end

	if Sliding == false then
		for i = 1, 4 do
			local hitz, enz = RAY(Torsoz.Position, Vector3.new(0,-2.6,0))
			bg.cframe = CFrame.new(NV, dir) * CFrame.Angles((math.pi/2.2) - ((math.pi/2.2)/4*i),0.24 - (0.24/4*i),0)
			bv.velocity = dir*spd + Vector3.new(0,GravPoint,0)

			if hitz ~= nil then
				GravPoint = 0
				Torsoz.CFrame = CFrame.new(enz, enz+dir) * CFrame.Angles((math.pi/2.2) - ((math.pi/2.2)/4*i),0.24 - (0.24/4*i),0) + Vector3.new(0,0.7+(1.8/4*i),0)
				spd = spd - 0.95
			else
				if GravPoint > -180 then
					GravPoint = GravPoint - 5.6
				end
				spd = spd - 0.36
			end
			wait(0.02)
		end
		local hitz, enz = RAY(Torsoz.Position, Vector3.new(0,-2.6,0))
		Torsoz.CFrame = CFrame.new(enz, enz+dir) + Vector3.new(0,3,0)
	end
	bv:remove()
	bg:remove()
	SlideCooldown = 10
	Stand()
	st.Text = ""
end

function KD(key)
	if pause.Value == false then
		if key == string.char(32) then
			Space = true

			local ghitz, genz = RAY(Torsoz.Position, Vector3.new(0,-3.7,0))
			--+Vector3.new(0,1.1,0)
			local hitz, enz = RAY(Torsoz.Position, Torsoz.CFrame.lookVector*3.75)
			local righthitz, rightenz
			local lefthitz, leftenz

			if HWallRunning == false then
				righthitz, rightenz = RAY(Torsoz.Position, ((Torsoz.CFrame * CFrame.new(1.5,0,-0.2)).p - Torsoz.CFrame.p).unit*3.9)
				lefthitz, leftenz = RAY(Torsoz.Position, ((Torsoz.CFrame * CFrame.new(-1.5,0,-0.2)).p - Torsoz.CFrame.p).unit*3.9)

			elseif HWallRunning == "Jumping" then
				righthitz, rightenz = RAY(Torsoz.Position, ((CFrame.new(Torsoz.Position, Torsoz.Position + HWRDir) * CFrame.new(1.5,0,-0.2)).p - Torsoz.Position).unit*3.9)
				lefthitz, leftenz = RAY(Torsoz.Position, ((CFrame.new(Torsoz.Position, Torsoz.Position + HWRDir) * CFrame.new(-1.5,0,-0.2)).p - Torsoz.Position).unit*3.9)

			end


			if hitz == nil and VWallRunning == "Falling" then
				VWallRunning = "BackflipFromFall"
			end

			if Diving == false and DivingCooldown <= 0 then
				local hitz2, enz2 = RAY(Torsoz.Position, Vector3.new(0,-3.5,0))

				if hitz ~= nil then
					if Action == "Standing" and VWRCooldown == 0 then
						if hitz2 == nil or hitz2.CanCollide == false then
							VWR(hitz, enz)
						end
					end
				end

				if (HWallRunning == false or (HWallRunning == "Jumping" and (HWRLastPart ~= righthitz or HWRLastPart ~= lefthitz))) and HWRCooldown == 0 and VWallRunning == false then

					if (hitz == nil or HWallRunning == "Jumping") and ((righthitz ~= nil and righthitz.Parent:findFirstChild("Humanoid") == nil and righthitz.Parent.className ~= "Hat") or (lefthitz ~= nil and lefthitz.Parent:findFirstChild("Humanoid") == nil and lefthitz.Parent.className ~= "Hat")) then
						if hitz2 == nil or hitz2.CanCollide == false then
							local right = (rightenz - Torsoz.Position).magnitude
							local left = (leftenz - Torsoz.Position).magnitude
							if right < left then
								if HWallRunning == "Jumping" and HWRLastPart ~= righthitz then
									HWallRunning = false
									while Standing == false do
										wait(0.01)
									end
									print("2nd Right Activated!")
									HWallRun(righthitz, rightenz, -math.pi/2)
								else
									if hitz == nil then
										print("Right Activated")
										HWallRun(righthitz, rightenz, -math.pi/2)
									end
								end
							elseif left < right then
								if HWallRunning == "Jumping" and HWRLastPart ~= lefthitz then
									HWallRunning = false
									while Standing == false do
										wait(0.01)
									end
									print("2nd Left Activated!")
									HWallRun(lefthitz, leftenz, math.pi/2)
								else
									if hitz == nil then
										print("Left Activated")
										HWallRun(lefthitz, leftenz, math.pi/2)
									end
								end
							end
						end
					end
				end

			end

			if HWallRunning == true then
				HWallRunning = "Jumping"
				Action = "HWRJumping"
			end

		elseif key == string.char(48) then
			Shift = true
		elseif key == "l" then
			Sliding = true
			Slide()
		end
	end
end

function KU(key)
	if key == string.char(32) then
		Space = false
	elseif key == string.char(48) then
		Shift = false
	elseif key == "l" then
		Sliding = false
	elseif key == "a" then
		VWRLeft = false
	elseif key == "d" then
		VWRRight = false
	end
end

mouse.KeyDown:connect(function(key) KD(key) end)
mouse.KeyUp:connect(function(key) KU(key) end)

Stand()

local animatebg = Instance.new("BodyGyro")
animatebg.D = 100
local GravAction = "Idle"
local PrevGravAction = GravAction

local hue = 0
local recyclecount = 0
local tickoffset = tick()
local fadetab = {}
local fadetab2 = {}
local animatebgcount = 0
game:service("RunService").Stepped:connect(function()
	if (Hu:GetState() == Enum.HumanoidStateType.Freefall) then
		if (16+(chg/3.125))>((math.sqrt((math.abs(Torsoz.Velocity.X)^2)+(math.abs(Torsoz.Velocity.Z)^2)))) then
				Hu.WalkSpeed = 16+(chg/3.125)
		else
				Hu.WalkSpeed = (math.sqrt((math.abs(Torsoz.Velocity.X)^2)+(math.abs(Torsoz.Velocity.Z)^2)))/1.0025
		end

	else
		if GravAction ~= "Falling" then
			Hu.WalkSpeed = 16+(chg/3.125)
		end
	end
	workspace.Gravity = 196.2
	char.Humanoid.JumpPower = 50.145
	GravAction = "Idle"
	hue = hue + 3
	hue = hue % 360

	------------- anim angle changing --------
	if animangle > math.pi then
		animplus = false
	elseif animangle < -math.pi then
		animplus = true  
	end
	if animplus == true then
		animangle = animangle + animspeed
	elseif animplus == false then
		animangle = animangle - animspeed
	end

	local hitz, enz = RAY(Torsoz.Position, Vector3.new(0,-3.9,0))
	if (FOV >= 70 and FOV < 74) and Vector3.new(Torsoz.Velocity.x,0,Torsoz.Velocity.z).magnitude > 25 then
		FOV = FOV + 1
	elseif (FOV <= 74 and FOV > 70) and Vector3.new(Torsoz.Velocity.x,0,Torsoz.Velocity.z).magnitude < 20 then
		FOV = FOV - 1
	end
	if pause.Value == true then
		Hu.WalkSpeed = 0
	end
	if HWallRunning == true then
		if HWRGravDrop == false then
			GravPoint = GravPoint - 0.4
		else
			GravPoint = GravPoint - 2
		end
	elseif HWallRunning == "Jumping" then
		GravPoint = GravPoint - 1.7
	end
	----------------------------- stamina ----------------------------------------
	t.TextColor3 = Color3.new((chg/100),1-(chg/100),0)
	t.TextStrokeColor3 = Color3.new((chg/100),1-(chg/100),0)
	t2.TextColor3 = Color3.new((chg/100),1-(chg/100),0)
	t2.TextStrokeColor3 = Color3.new((chg/100),1-(chg/100),0)
	l.TextColor3 = Color3.new((chg/100),1-(chg/100),0)
	l.TextStrokeColor3 = Color3.new((chg/100),1-(chg/100),0)
	if vwrc > 0 then
		vwrc = vwrc - 1
	end
	if stamina < maxstamina then
		stamina = stamina + 0.5
	end
	if stamina < 1 then
		Shift = false
	end
	if char.Humanoid:GetState() == Enum.HumanoidStateType.Jumping then
			if stamina - (chg*2.5) > 0 then
				char.HumanoidRootPart.Velocity = Vector3.new(char.HumanoidRootPart.Velocity.X+(Torsoz.CFrame.LookVector.X*(chg*0.65)),char.HumanoidRootPart.Velocity.Y+(0.65*chg),char.HumanoidRootPart.Velocity.Z+(Torsoz.CFrame.LookVector.Z*(chg*0.65)))
				stamina = stamina-(chg*2.5)
				chg = 0
			else
				char.HumanoidRootPart.Velocity = Vector3.new(char.HumanoidRootPart.Velocity.X+(Torsoz.CFrame.LookVector.X*((stamina*0.4)*0.65)),char.HumanoidRootPart.Velocity.Y+((stamina*0.4)*0.65),char.HumanoidRootPart.Velocity.Z+(Torsoz.CFrame.LookVector.Z*((stamina*0.4)*0.65)))
				stamina = 0
				chg = 0
			end
	end
	if Shift == true then
		if Vector3.new(Torsoz.Velocity.x, 0, Torsoz.Velocity.z).magnitude > 20 then
			stamina = stamina - 1
		end
		if chg <= 98 then
			chg = chg+2
		end

	else
		if chg >= 2 then
			chg = chg - 2
		end

	end
	if HWallRunning == true then
		if Shift == true then
			stamina = stamina - 0.5
		else
			stamina = stamina - 1.5
		end
	end
	if stamina < 0 then
		abort = true
		stamina = 0
	else
		abort = false
	end
	if Vector3.new(Torsoz.Velocity.x, 0, Torsoz.Velocity.z).magnitude > 18 and Action == "Standing" and Shift == true then
		if stamina > 0 then

			if stamina < 0 then

			end
		else

		end
		if Action == "Standing" then
		end
	elseif Vector3.new(Torsoz.Velocity.x, 0, Torsoz.Velocity.z).magnitude > 12 and Action ~= "Sliding" then
		if stamina < maxstamina then

			if stamina > maxstamina then

			end
		else

		end
		if Action == "Standing" then
		end
	elseif Vector3.new(Torsoz.Velocity.x, 0, Torsoz.Velocity.z).magnitude < 2 then
		animspeed = 0.05
		if Action == "Standing" then
		end
		if stamina < maxstamina then
			if Sitting == false then

			else

			end
			if stamina > maxstamina then

			end
		else

		end
	end


	if hitz == nil then
		if Torsoz.Velocity.y > 1 or (Torsoz.Velocity.y < -1 and Torsoz.Velocity.y > -90) then
			if Action == "Standing" then
				GravAction = "Rising"
				animspeed = 0.05
				if animatebg.Parent ~= nil then
					animatebg.Parent = Torsoz
					animatebg.maxTorque = Vector3.new(math.huge,10000,math.huge)
					local lokvec = Torsoz.CFrame.lookVector*100
					animatebg.cframe = CFrame.new(NV, Vector3.new(lokvec.x,0,lokvec.z))
					animatebg.Parent = nil
				end
			end
		end
	end

	if hitz == nil then
		local hitz2, enz2 = RAY(Torsoz.Position, Vector3.new(0,-6,0))
		if hitz2 == nil then
			if Torsoz.Velocity.y < -90 and 0==1 then
				if Action == "Standing" then
					GravAction = "Falling"
					Hu.WalkSpeed = 0
					animspeed = 0.5
					animatebg.Parent = Torsoz
					animatebg.maxTorque = Vector3.new(math.huge,10000,math.huge)
					local lokvec = Torsoz.CFrame.lookVector*100
					animatebg.cframe = CFrame.new(NV, Vector3.new(lokvec.x,0,lokvec.z)) * CFrame.Angles(-math.pi/11,animangle/70,0)
				end
			end
		elseif hitz2.CanCollide == true then
			if animatebg.Parent ~= nil then
				animatebg.Parent = Torsoz
				animatebg.maxTorque = Vector3.new(math.huge,10000,math.huge)
				local lokvec = Torsoz.CFrame.lookVector*100
				animatebg.cframe = CFrame.new(NV, Vector3.new(lokvec.x,0,lokvec.z))
				animatebg.Parent = nil
			end
		end
	end

	if GravAction == "Idle" and animatebg.Parent ~= nil then
		animatebg.Parent = nil
	end


	if HWRCooldown > 0 then
		HWRCooldown = HWRCooldown - 1
	end
	if VWRCooldown > 0 then
		if hitz ~= nil and VWRCooldown > 0 then
			VWRCooldown = VWRCooldown - 1
		end
	end
	if SlideCooldown > 0 then
		SlideCooldown = SlideCooldown - 1
	end

	if Action == "HWallRunning" or Action == "VWallRunning" then
	elseif Action == "Standing" then

	end
	PrevGravAction = GravAction
	Calculate()
end)
game.Players.LocalPlayer.CharacterAdded:connect(function()
	script.Parent = game.Players.LocalPlayer.Character or game.Workspace[game.Players.LocalPlayer.Name] or game.Players.LocalPlayer.CharacterAdded:Wait()
	Hu = script.Parent:WaitForChild("Humanoid")
	Torsoz = script.Parent:WaitForChild("HumanoidRootPart")
	char = script.Parent
	char.Humanoid.JumpPower = 50.145
	workspace.Gravity = 196.2
	Hu:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
	Hu:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
	CreateGui()
end)
